import { NodeRfcEnvironment } from "./noderfc-bindings";
import { RfcConnectionParameters, RfcLoggingLevel, RfcParameterDirection, RfcObject } from "./sapnwrfc";
export type RfcClientOptions = {
    bcd?: string | Function;
    date?: {
        toABAP: Function;
        fromABAP: Function;
    };
    time?: {
        toABAP: Function;
        fromABAP: Function;
    };
    filter?: RfcParameterDirection;
    stateless?: boolean;
    timeout?: number;
    logLevel?: RfcLoggingLevel;
};
export type RfcCallOptions = {
    notRequested?: Array<string>;
    timeout?: number;
};
interface RfcConnectionInfo {
    dest: string;
    host: string;
    partnerHost: string;
    sysNumber: string;
    sysId: string;
    client: string;
    user: string;
    language: string;
    trace: string;
    isoLanguage: string;
    codepage: string;
    partnerCodepage: string;
    rfcRole: string;
    type: string;
    partnerType: string;
    rel: string;
    partnerRel: string;
    kernelRel: string;
    cpicConvId: string;
    progName: string;
    partnerBytesPerChar: string;
    partnerSystemCodepage: string;
    partnerIP: string;
    partnerIPv6: string;
}
export type RfcClientConfig = {
    connectionParameters: RfcConnectionParameters;
    clientOptions?: RfcClientOptions;
};
export interface RfcClientBinding {
    new (connectionParameters: RfcConnectionParameters, clientOptions?: RfcClientOptions): RfcClientBinding;
    (connectionParameters: RfcConnectionParameters, options?: RfcClientOptions): RfcClientBinding;
    _id: number;
    _alive: boolean;
    _connectionHandle: number;
    _pool_id: number;
    _config: RfcClientConfig;
    connectionInfo(): RfcConnectionInfo;
    open(callback: Function): void;
    close(callback: Function): void;
    resetServerContext(callback: Function): void;
    ping(callback: Function): void;
    cancel(callback: Function): void;
    invoke(rfmName: string, rfmParams: RfcObject, callback: Function, callOptions?: RfcCallOptions): void;
    release(oneClientBinding: [RfcClientBinding], callback: Function): void;
}
export declare class Client {
    private __client;
    constructor(arg1: RfcClientBinding | RfcConnectionParameters, clientOptions?: RfcClientOptions);
    static get environment(): NodeRfcEnvironment;
    get environment(): NodeRfcEnvironment;
    get binding(): RfcClientBinding;
    get id(): number;
    get alive(): boolean;
    get connectionHandle(): number;
    get pool_id(): number;
    get config(): RfcClientConfig;
    get _id(): string;
    get connectionInfo(): RfcConnectionInfo;
    static checkCallbackArg(method: string, callback?: Function): void;
    connect(callback?: Function): void | Promise<Client>;
    open(callback?: Function): void | Promise<Client>;
    ping(callback?: Function): void | Promise<boolean>;
    close(callback?: Function): void | Promise<void>;
    cancel(callback?: Function): void | Promise<void>;
    resetServerContext(callback?: Function): void | Promise<void>;
    release(callback?: Function): void | Promise<void>;
    call(rfmName: string, rfmParams: RfcObject, callOptions?: RfcCallOptions): Promise<RfcObject>;
    invoke(rfmName: string, rfmParams: RfcObject, callback: Function, callOptions?: RfcCallOptions): void;
}
export {};
